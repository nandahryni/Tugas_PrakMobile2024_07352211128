import 'dart:core';

class ProdukDigital {
  String namaProduk;
  double harga;
  String kategori;
//NetworkAutomation dan DataManagement
  ProdukDigital(this.namaProduk, this.harga, this.kategori) {
    if (kategori == "NetworkAutomation" && harga < 200000) {
      throw ArgumentError("Harga untuk NetworkAutomation harus minimal 200.000");
    }
    if (kategori == "DataManagement" && harga >= 200000) {
      throw ArgumentError("Harga untuk DataManagement harus di bawah 200.000");
    }
  }

  void terapkanDiskon(int jumlahTerjual) {
    if (kategori == "NetworkAutomation" && jumlahTerjual > 50) {
      double diskon = 0.15 * harga;
      double hargaSetelahDiskon = harga - diskon;
      harga = (hargaSetelahDiskon >= 200000) ? hargaSetelahDiskon : 200000;
    }
  }
}

/// Kelas abstrak Karyawan
abstract class Karyawan {
  String nama;
  int umur;
  String peran;

  Karyawan(this.nama, {required this.umur, required this.peran});

  void bekerja();
}

/// KaryawanTetap dan KaryawanKontrak yang mengimplementasikan bekerja()
class KaryawanTetap extends Karyawan {
  KaryawanTetap(String nama, {required int umur, required String peran}) : super(nama, umur: umur, peran: peran);

  @override
  void bekerja() {
    print("$nama bekerja selama hari kerja reguler.");
  }
}

class KaryawanKontrak extends Karyawan {
  KaryawanKontrak(String nama, {required int umur, required String peran}) : super(nama, umur: umur, peran: peran);

  @override
  void bekerja() {
    print("$nama bekerja pada proyek dengan waktu spesifik.");
  }
}

/// Mixin Kinerja untuk menambah dan mengurangi produktivitas karyawan
mixin Kinerja {
  int produktivitas = 0;

  void updateProduktivitas(int nilai) {
    if (nilai < 0 || nilai > 100) {
      throw ArgumentError("Produktivitas harus dalam rentang 0-100.");
    }
    produktivitas = nilai;
  }
}

/// Kelas KaryawanDenganKinerja yang mengimplementasikan bekerja()
class KaryawanDenganKinerja extends Karyawan with Kinerja {
  KaryawanDenganKinerja(String nama, {required int umur, required String peran}) : super(nama, umur: umur, peran: peran);

  @override
  void bekerja() {
    print("$nama bekerja sesuai peran sebagai $peran.");
  }

  void cekProduktivitas() {
    if (peran == "Manager" && produktivitas < 85) {
      throw ArgumentError("Manager harus memiliki produktivitas minimal 85.");
    }
  }
}

/// Enum FaseProyek dan Kelas Proyek untuk manajemen fase
enum FaseProyek { Perencanaan, Pengembangan, Evaluasi }

class Proyek {
  FaseProyek fase = FaseProyek.Perencanaan;
  int jumlahKaryawan;
  int hariBerjalan;

  Proyek(this.jumlahKaryawan, this.hariBerjalan);

  void nextFase() {
    if (fase == FaseProyek.Perencanaan && jumlahKaryawan >= 5) {
      fase = FaseProyek.Pengembangan;
    } else if (fase == FaseProyek.Pengembangan && hariBerjalan > 45) {
      fase = FaseProyek.Evaluasi;
    }
  }
}

/// Kelas Perusahaan untuk manajemen karyawan aktif dan non-aktif
class Perusahaan {
  List<Karyawan> karyawanAktif = [];
  List<Karyawan> karyawanNonAktif = [];
  final int batasKaryawanAktif = 20;

  void tambahKaryawan(Karyawan karyawan) {
    if (karyawanAktif.length >= batasKaryawanAktif) {
      throw Exception("Batas maksimal karyawan aktif tercapai.");
    }
    karyawanAktif.add(karyawan);
  }

  void resignKaryawan(Karyawan karyawan) {
    karyawanAktif.remove(karyawan);
    karyawanNonAktif.add(karyawan);
  }
}

void main() {
  // Contoh penggunaan ProdukDigital
  ProdukDigital produk1 = ProdukDigital("Sistem Otomasi Jaringan", 250000, "NetworkAutomation");
  produk1.terapkanDiskon(60);
  print("Harga setelah diskon untuk produk NetworkAutomation: ${produk1.harga}");

  // Contoh penggunaan KaryawanTetap dan KaryawanKontrak
  KaryawanTetap karyawanTetap = KaryawanTetap("Ali", umur: 30, peran: "Developer");
  karyawanTetap.bekerja();

  KaryawanKontrak karyawanKontrak = KaryawanKontrak("Budi", umur: 25, peran: "NetworkEngineer");
  karyawanKontrak.bekerja();

  // Contoh penggunaan Karyawan dengan Kinerja
  KaryawanDenganKinerja manager = KaryawanDenganKinerja("Siti", umur: 40, peran: "Manager");
  manager.updateProduktivitas(90);
  manager.cekProduktivitas();
  print("Produktivitas Manager: ${manager.produktivitas}");

  // Contoh penggunaan FaseProyek dan Proyek
  Proyek proyek = Proyek(5, 50);
  proyek.nextFase();
  print("Fase proyek saat ini: ${proyek.fase}");

  // Contoh penggunaan kelas Perusahaan
  Perusahaan perusahaan = Perusahaan();
  perusahaan.tambahKaryawan(karyawanTetap);
  perusahaan.tambahKaryawan(karyawanKontrak);
  perusahaan.resignKaryawan(karyawanTetap);

  print("Jumlah karyawan aktif: ${perusahaan.karyawanAktif.length}");
  print("Jumlah karyawan non-aktif: ${perusahaan.karyawanNonAktif.length}");
}
